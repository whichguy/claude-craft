#!/bin/bash

# Pre-commit hook for secret detection
# Prevents committing files with hardcoded secrets

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üõ°Ô∏è  Running pre-commit secret scan...${NC}"

# Get the repository root
REPO_ROOT=$(git rev-parse --show-toplevel)
SECURITY_SCANNER="$REPO_ROOT/tools/simple-secrets-scan.sh"

# Check if security scanner exists
if [ ! -x "$SECURITY_SCANNER" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Security scanner not found, skipping scan${NC}"
    exit 0
fi

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}‚úÖ No files staged for commit${NC}"
    exit 0
fi

echo -e "${BLUE}üìÅ Files staged for commit:${NC}"
echo "$STAGED_FILES" | sed 's/^/  /'

# Track if any secrets are found
SECRETS_FOUND=false
CRITICAL_FILES=""

# Scan each staged file for secrets
while IFS= read -r file; do
    if [ -f "$file" ]; then
        # Skip certain file types that commonly have examples
        case "$file" in
            */test/* | */tests/* | */examples/* | */docs/* | *test* | *example* | *.md | *.txt)
                # Still scan but be less strict for documentation/test files
                if ! "$SECURITY_SCANNER" "$file" false >/dev/null 2>&1; then
                    echo -e "${YELLOW}‚ö†Ô∏è  Potential secrets in documentation/test file: $file${NC}"
                    echo -e "${YELLOW}   ‚Üí If these are examples, consider using placeholder values${NC}"
                fi
                ;;
            *)
                # Strict scanning for code files
                echo -e "${BLUE}üîç Scanning: $file${NC}"
                if ! "$SECURITY_SCANNER" "$file" false; then
                    SECRETS_FOUND=true
                    CRITICAL_FILES="$CRITICAL_FILES\n  $file"
                    echo -e "${RED}‚ùå Secrets detected in: $file${NC}"
                fi
                ;;
        esac
    fi
done <<< "$STAGED_FILES"

if [ "$SECRETS_FOUND" = "true" ]; then
    echo -e "${RED}üö® COMMIT BLOCKED: Secrets detected in staged files!${NC}"
    echo -e "${RED}Critical files:${CRITICAL_FILES}${NC}"
    echo ""
    echo -e "${YELLOW}üí° To fix this:${NC}"
    echo -e "${YELLOW}   1. Remove hardcoded secrets from the files above${NC}"
    echo -e "${YELLOW}   2. Use environment variables: \${API_KEY}${NC}"
    echo -e "${YELLOW}   3. Add secrets to .env file (ensure .env is in .gitignore)${NC}"
    echo -e "${YELLOW}   4. For test files, use obviously fake values${NC}"
    echo ""
    echo -e "${YELLOW}üîß Quick commands:${NC}"
    echo -e "${YELLOW}   git reset HEAD <file>     # Unstage file${NC}"
    echo -e "${YELLOW}   git stash                 # Stash changes${NC}"
    
    # Log the prevented commit
    echo "$(date '+%Y-%m-%d %H:%M:%S') - PRE-COMMIT: Blocked commit with secrets in: $CRITICAL_FILES" >> ~/.git-security.log
    
    exit 1
else
    echo -e "${GREEN}‚úÖ Pre-commit secret scan passed - no secrets detected${NC}"
fi

exit 0